
encoding := iso-8859-1.

start-symbols := $root.

punctuation-characters := "?!.:;,()<>{}[]+*-`'_\"".

;; command line settings
verbose := 0.
limit := 10000.
memlimit := 32.
hyper := true.
one-solution := false.
one-meaning := true.
default-les := true.
yy := true.
k2y := 50.

;; definition of names of types with a special meaning to PET
special-name-top := "*top*".
special-name-symbol := "string".
special-name-string := "string".
special-name-cons := "*cons*".
special-name-list := "*list*".
special-name-nil := "*null*".
special-name-difflist := "*diff-list*".

;; same for attributes
special-name-attr-first := "FIRST".
special-name-attr-rest := "REST".
special-name-attr-list := "LIST".
special-name-attr-last := "LAST".
special-name-attr-args := "ARGS".

;; name of type to get info about grammar into (if at all)
grammar-info := grammar_info.

;; status values that mark rules
infl-rule-status-values := inflrule.
rule-status-values := nonterminal.
;lexrule-status-values := lex-rule.

;; status values that mark lexicon entries
lexentry-status-values := lex-entry. 

;; path to the list of arguments in a rule
rule-args-path := ARGS.

;; path to marker for head dtr of a rule
head-dtr-path := HD.

;; path to orthography
orth-path := STEM.

;; type to mark boolean value `true'
true-type := +.


;;
;; suppress results of regular morphology rules if an irregular form exists.
;;
irregular-forms-only.

lex-entries-can-fail.

;;
;; names of attributes not to pass from daughter to mother in parsing
;;
deleted-daughters := ARGS.

;;
;; path to LABEL for RA mapping, absolute and within a relation
;;
label-path := "SYNSEM.LOCAL.KEYS.KEY.LABEL".
label-path-tail := "LABEL".

;;;
;;; default initial priority assigned to generic lexical entries; this may be
;;; re-adjusted by later steps in unknown word handling.  generic entries that
;;; end up with a zero priority are dropped before parsing.
;;;
default-gen-le-priority := 0.


;;
;; discount on priority for words covered by multi-word lexical entry
;;
lexical-covering-discount := -200.

;;
;; discount on priority for POS-supplied lexical entries.
;;
posdiscount := SpellCorrection -200.

;;;
;;; the setting `pos-completion' enables an additional mechanism:
;;; whenever we receive POS information as part of the input, we check
;;; to see whether the built-in lexical entries suffice to satisfy the
;;; POS annotations: each lexical entry retrieved for an input token
;;; <string, pos_1, pos_2, pos_3> is mapped to an application-specific
;;; POS tag, using the `type-to-pos' map, and checking the type of each
;;; lexical entry for subsumption against the left-hand side of each
;;; `type-to-pos' rule.  some or all POS annotations from the input may
;;; be `satisfied' under this mapping by built-in lexical entries,
;;; e.g. for the example above, there may be lexical entries whose type
;;; maps to `pos_1' and `pos_3'.  unless all POS annotations are
;;; satisfied after all built-in lexical entries have been processed,
;;; the remaining POS categories are processed by the regular
;;; `posmapping' look-up.  however, the resulting generic lexical
;;; entries will have their scores discounted by the value of
;;; `discount-gen-le-priority', so as to distinguish them from
;;; completely unknown words.  note that, as a side effect, an empty
;;; `type-to-pos' map will always result in activating all generic
;;; lexical entries, even for input tokens that were found in the
;;; built-in lexicon.
;;;
;pos-completion.

;; 9-5-02 - Changed from 750 to 10 - Want to mostly favor these completions
discount-gen-le-priority := 10.

type-to-pos :=
;  basic_noun_word UpperAndLowerCase
  basic_pronoun_word UpperAndLowerCase
  basic_pronoun_word UpperAndLowerCaseInitial
;  basic_det_word UpperAndLowerCase
;  basic_prep_word UpperAndLowerCase
.


;;;
;;; based on selectional dependencies between lexical entries, reduce chart
;;; right after lexical look-up: `chart-dependencies' is a list of pairs of
;;; paths into lexical entries.  the type of the node at the end of the first
;;; path in one lexical entry makes that entry depend on the existence of some
;;; other lexical entry that has that same type as the value of the node at the
;;; end of the second path.
;;;
;;; _fix_me_
;;; not entirely sure, but it must (in principle) be possible to saturate a
;;; dependency from lexical and grammar rules.  say, a lexical entry selected
;;; for something nominalized, and that relation was introduced by a lexical
;;; rule, in turn.  unless this is the case already, compute static list of all
;;; relations introduced by rules (which, presumably, requires another setting
;;; to declare how to find constructional semantic contributions; C-CONT) and
;;; consider all such dependencies on lexical entries always saturated.
;;;                                                          (11-oct-02; oe)
unidirectional-chart-dependencies.
chart-dependencies := 
;  "SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.INDEX"
;  "SYNSEM.LOCAL.CONT.INDEX"
  "SYNSEM.LOCAL.KEYS.--+COMPKEY" "SYNSEM.LOCAL.KEYS.KEY"
  "SYNSEM.LOCAL.KEYS.--+OCOMPKEY" "SYNSEM.LOCAL.KEYS.KEY"
.

;;;
;;; from here on, scoring for grammar rules and lexical entries.
;;;

default-rule-priority := 500.

spanning-only-rules := $runon_s.

default-le-priority := 800.
