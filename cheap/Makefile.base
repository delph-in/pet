# -*- makefile -*-
#%.o: %.cpp
#	$(COMPILE.cc) $< $(OUTPUT_OPTION)

RM = rm
OBJ = o
CXX = g++
CC = gcc
LD = gcc
# CC = KCC --
# CXX = KCC
cpp=cpp
c=c

DEPDIR=.deps

ifeq ($(shell test -d /project/cl/deepthought && echo "yes"), yes)
ECLPATH = /project/cl/deepthought/local
ICUDIR = /project/cl/deepthought/local
ITSDBPATH = /project/cl/deepthought/lkb
XERCESPATH = /project/cl/deepthought/local/lib/xerces-c
else 
ECLPATH = /usr/local
ICUDIR = /usr/local
ITSDBPATH = /home/kiefer/Lisp/lkb
XERCESPATH = /usr/local/lib/xerces-c
endif

#PROFILING=-pg
MRS=-DHAVE_ECL
XML=-DHAVE_XML
ICU=-DHAVE_ICU
TSDB=-DTSDBAPI

DEFINES=-DDYNAMIC_SYMBOLS 
#	-DHAVE_EXT_HASH_MAP -DHAVE_MMAP $(TSDB) $(ICU) $(MRS) $(XML)

INCLUDE = -I. -I.. -I../common

LIBS = -lstdc++
#
# choice here has to correspond to choice for DAGOBJ (see below):
#

DEFINES += -DDAG_TOMABECHI -DQC_PATH_COMP # -DPACKING
# DEFINES += -DDAG_SIMPLE -DWROBLEWSKI2
# DEFINES += -DDAG_FIXED -DNO_CAST
# DEFINES += -DDAG_SYNTH1

CPPFLAGS = $(DEFINES) $(INCLUDE)
CXXFLAGS = -g -Wall $(PROFILING) $(CPPFLAGS)
CFLAGS = -g -Wall $(PROFILING) $(CPPFLAGS)

VPATH = .:../common

#
# choice here has to correspond to choice for CPPFLAGS (see above):
#

# DAGSRC = dag-io.$(cpp) dag-common.$(cpp) dag-arced.$(cpp) dag-alloc.$(cpp) dag-simple.$(cpp)
DAGSRC = dag-io.$(cpp) dag-common.$(cpp) dag-arced.$(cpp) dag-alloc.$(cpp) dag-tomabechi.$(cpp) failure.$(cpp) qc.$(cpp)
# DAGSRC = dag-common.$(cpp) dag-fixed.$(cpp)
# DAGSRC = dag-io.$(cpp) dag-common.$(cpp) dag-arced.$(cpp) dag-alloc.$(cpp) dag-synth1.$(cpp)

COMMONSRCS = bitcode.$(cpp) chunk-alloc.$(cpp) mfile.$(c)\
	     lex-io.$(cpp) lex-tdl.$(cpp) settings.$(cpp) dumper.$(cpp)\
             grammar-dump.$(cpp) types.$(cpp) utility.$(cpp) $(DAGSRC)

PARSESRCS = chart.$(cpp) hash.$(cpp) item.$(cpp) item-printer.$(cpp) \
	    lexicon.$(cpp) lexparser.$(cpp) lingo-tokenizer.$(cpp)\
            morph.$(cpp) options.$(cpp)\
            parse.$(cpp) paths.$(cpp) postags.$(cpp)\
	    sm.$(cpp) task.$(cpp) tsdb++.$(cpp)\
	    yy.$(cpp) yy-tokenizer.$(cpp)  fs.$(cpp) grammar.$(cpp)


CHEAPSRCS = cheap.$(cpp) $(COMMONSRCS) $(PARSESRCS)

ifdef TSDB
  LIBS += -Wl,-R,$(ITSDBPATH)/lib/linux -L$(ITSDBPATH)/lib/linux -litsdb
  INCLUDE += -I$(ICUDIR)/include
endif

ifdef ICU
  LIBS += -Wl,-R,$(ICUDIR)/lib -L$(ICUDIR)/lib -licuuc -licui18n -lpthread
  INCLUDE += -I$(ICUDIR)/include
  CHEAPSRCS += unicode.$(cpp)
endif

ifeq "$(MRS)" "-DHAVE_ECL"
  LIBS += -Wl,-R,$(ECLPATH)/lib/ecl -L$(ECLPATH)/lib/ecl -lecl
  # This is not nice: it requires the tsdb path
  LIBS += -L$(ITSDBPATH)/lib/linux -lmrs
  INCLUDE += -I$(ECLDIR)/include
  CHEAPSRCS+= cppbridge.$(cpp) petecl.$(c) petmrs.$(c) 
endif

ifdef XML
  LIBS += -Wl,-R,$(XERCESPATH)/lib -L$(XERCESPATH)/lib -lxerces-c
  INCLUDE+= -I$(XERCESPATH)/include
  CHEAPSRCS+= pic-handler.$(cpp) xmlparser.$(cpp)
endif

CHEAPOBJS = $(patsubst %.$(c), %.o, $(CHEAPSRCS:.$(cpp)=.o))

#
# dependencies
#

$DEPDIR/%.Po: %.c
	set -e; $(CC) -MM $(CFLAGS) -I$(ECLPATH)/lib/ecl/h $< \
	    | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	    [ -s $@ ] || rm -f $@

$DEPDIR/%.Po: %.cpp
	set -e; $(CPP) -MM $(CPPFLAGS) -I$(ECLPATH)/lib/ecl/h $< \
	    | sed 's/\($*\)\.o[ :]*/\1.o $@ : /g' > $@; \
	    [ -s $@ ] || rm -f $@

# .depend: $(CHEAPSRCS)
# 	$(CC) -MM $(CFLAGS) -I$(ECLPATH)/lib/ecl/h $^ > $@
#
# ifneq ("$(shell ls .depend 2>/dev/null)", "")
# include .depend
# endif

deap: $(CHEAPOBJS)
	$(LD) $(CFLAGS) -o $@ $^ $(LIBS)

#
# cheap: full optimization and global libs
#

cheap: CPPFLAGS+= -O2
cheap: CFLAGS+= -O2
cheap: $(CHEAPOBJS)
	$(LD) $(CFLAGS) -o $@ $^ $(LIBS)

ifeq "$(MRS)" "-DHAVE_ECL"
petecl.$(OBJ): petecl.$(c) 
	$(CC) $(CFLAGS) -I$(ECLPATH)/lib/ecl/h \
	  -o $@ -Dlinux -fstrict-aliasing -c $<
petmrs.$(OBJ): petmrs.$(c) 
	$(CC) $(CFLAGS) -I$(ECLPATH)/lib/ecl/h \
	  -o $@ -Dlinux -fstrict-aliasing -c $<
endif

#
# goofy
#

MOC = moc

OBJMOC = moc_goofy.o

moc_goofy.o: moc_goofy.cc \
	goofy.h

moc_goofy.cc: goofy.h
	$(MOC) goofy.h -o moc_goofy.cc

QTLIBS = -L$(QTDIR)/lib -lqt -lqt-mt -lqutil -L/usr/X11R6/lib -lX11 -lXext

GOOFYOBJS = goofy.o $(CHEAPOBJS) $(OBJMOC)
goofy: INCLUDE+= -I$(QTDIR)/include
goofy: $(GOOFYOBJS)
	$(LD) $(CFLAGS) -o $@ $^ $(QTLIBS) $(LIBS)

#
# mtest
#

MTESTOBJS = mtest.$(OBJ) chunk-alloc.$(OBJ)
mtest: $(MTESTOBJS)
	$(CPP) $(CFLAGS) -o $@ $^ $(LIBS)

#
# sanity
#

clean:
	$(RM) *.$(OBJ) $(patsubst %.$(c), .%.d, $(patsubst %.$(cpp), .%.d, $(CHEAPSRCS)))

#
# rebuild MRS library, using an installed ECL binary (in the PATH)
#
mrs:
	test -d $(ITSDBPATH)/src/.lecl/ || mkdir -p $(ITSDBPATH)/src/.lecl/
	find $(ITSDBPATH)/src/.lecl/ -type f -exec rm {} \;
	( \
	  echo "(load \"$(ITSDBPATH)/src/general/loadup.lisp\")"; \
	  echo "(compile-system \"mrs\")"; \
	) | $(ECLPATH)/bin/ecl
	if test -f cheap ; then rm cheap ; fi

include $(patsubst %.$(c), .%.d, $(patsubst %.$(cpp), $(DEPDIR)/%.Po, $(CHEAPSRCS)))

# old junk
# solaris
# LIBS = -Wl,-R,/proj/perform/uc/5lib -lm -lstdc++ -ldl -liberty
# linux dynamic: all standard libraries are provided by the compiler
# LIBS = -lm -lstdc++ -lc -ldl
# cygwin
# LIBS = -lm -lstdc++ -liberty

# solaris
# ITSDBLIBS = $(ITSDBPATH)/lib/solaris/libitsdb.a $(ITSDBPATH)/lib/solaris/libpvm3.a -lsocket -lnsl -lkstat -lposix4
# linux dynamic
#ITSDBLIBS = -L$(ITSDBPATH)/lib/linux -litsdb -lpvm3 -liberty
# linux static
#ITSDBLIBS = -Wl,-R,$(ITSDBPATH)/lib/linux -L$(ITSDBPATH)/lib/linux -litsdb
# cygwin (no itsdb available)
# ITSDBLIBS =

