This directory contains the `cheap' parser framework.

`cheap' can be built using various (three at the moment) different
unifiers.  the `standard' unifier is dag-tomabechi (based on Tomabechi
(1991)), the most basic one is dag-simple (based on Wroblewski (1987),
and an experimental one is dag-fixed, using a novel fixed arity
representation of feature structures.

The main function of the parser is `parse'. It works on feature
structures (class `fs', abstracting from the concrete dag module
used), generating parser tasks (class `task') that are managed by an
agenda (class `agenda'). The input to the `parse' function is a list
of tokens (class `tokenlist'), the result is a completed parse chart
(class `chart') containing all items (class `item') licenced by the
grammar for the given input. Optionally the parser can stop after the
first item spanning the input is found, or when a certain number of
items has been generated.
