;;; ===========================================================
;;; standard types
;;; ===========================================================

string := *top*.

*list* := *top*.

*cons* := *list* &
 [ FIRST *top*,
   REST *list* ].

*null* := *list*.

*diff-list* := *top* &
[ LIST *list*,
  LAST *list* ].

strlist := *list*.
strcons := strlist & *cons* & [ FIRST string , REST strlist ].
strnull := strlist & *null*.



;;; ===========================================================
;;; categorial features
;;; ===========================================================


;;; -----------------------------------------------------------
;;; agreement features
;;; -----------------------------------------------------------

agr := *top*.

sg := agr.

pl := agr.



;;; -----------------------------------------------------------
;;; parts-of-speech
;;; -----------------------------------------------------------

pos := *top*.

nominal := pos &
       [ NUMAGR agr ].

noun := nominal.

verb := pos.

det := nominal.

prep := pos.



;;; ===========================================================
;;; signs
;;; ===========================================================

sign := *top* & 
[ ORTH *diff-list*,
  HEAD pos,
  SPR *list*,
  COMPS *list*, 
  ARGS *list* ].

;;; -----------------------------------------------------------
;;; phrases
;;; -----------------------------------------------------------

phrase := sign &
[ COMPS <> ].

head-initial := phrase &
[ HEAD #head,
  ARGS < [ HEAD #head ], ... > ].

unary-rule := phrase &
[ ORTH #orth,
  ARGS < [ ORTH #orth ] > ].

binary-rule := phrase &
[ ORTH [LIST #ofront, LAST #otail],
  ARGS < [ ORTH [LIST #ofront, LAST #omiddle ]],
         [ ORTH [LIST #omiddle, LAST #otail ]] > ].

ternary-rule := phrase &
[ ORTH [LIST #ofront, LAST #otail],
  ARGS < [ ORTH [LIST #ofront, LAST #omiddle1 ]],
         [ ORTH [LIST #omiddle1, LAST #omiddle2 ]],
         [ ORTH [LIST #omiddle2, LAST #otail ]] >].

unary-head-initial := unary-rule & head-initial.
binary-head-initial := binary-rule & head-initial.
ternary-head-initial := ternary-rule & head-initial.

head-second := binary-rule &
[ HEAD #head,
  ARGS < sign, [ HEAD #head ] > ].

;;; -----------------------------------------------------------
;;; lexical items
;;; -----------------------------------------------------------

lex-item := sign &
[ ORTH [ LIST [ REST #rest ], LAST #rest ] ,
  TOKEN +tok ].

lexeme := lex-item.

const-lxm := lexeme.

word := lex-item &
[ HEAD #head,
  SPR #spr,
  COMPS #comps,
  ARGS < lexeme &
         [ HEAD #head,
           SPR #spr,
           COMPS #comps ] > ].

det-lxm := const-lxm &
[ HEAD det,
  SPR < >,
  COMPS < > ].

sg-det-lxm := det-lxm &
[ HEAD [ NUMAGR sg ]].

pl-det-lxm := det-lxm &
[ HEAD [ NUMAGR pl ]].

noun-lxm := lexeme &
[ HEAD noun & [NUMAGR #agr],
  SPR < [HEAD det & [NUMAGR #agr]] >,
  COMPS < > ].

noun-form := word &
 [ ARGS < noun-lxm > ].

sing-noun := noun-form &
[ HEAD.NUMAGR sg ].

plur-noun := noun-form &
[ HEAD.NUMAGR pl ].

verb-lxm := lexeme &
[ HEAD verb,
  SPR < phrase & [HEAD noun, SPR <>] > ].

verb-form := word &
 [ ARGS < verb-lxm > ].

past-verb := verb-form.

sing-verb := verb-form &
[ SPR < [HEAD.NUMAGR sg ] > ].

plur-verb := verb-form &
[ SPR < [HEAD.NUMAGR pl ] > ].

intrans-verb := verb-lxm &
[ COMPS <> ].

trans-verb := verb-lxm &
[ COMPS < phrase & [HEAD noun, SPR <>] > ].

ditranspp-verb := verb-lxm &
[ COMPS < phrase & [HEAD noun, SPR <>],
          phrase & [HEAD prep, SPR <>] > ].

ditransnp-verb := verb-lxm &
[ COMPS < phrase & [HEAD noun, SPR <>],
          phrase & [HEAD noun, SPR <>] > ].

prep-lxm := const-lxm &
[ HEAD prep,
  SPR < >,
  COMPS < phrase & [HEAD noun, SPR <>] > ].



;;; ===========================================================
;;; input feature structures
;;; ===========================================================

+tok := *top* &
  [ +IDS   strlist,
    +FORM  string,
    +STEM  string,
    +INFLR string,
    +LEXID string,
    +CFROM string,
    +CTO   string,
    +TNT   +tnt    ].

+tnt := *top* &
  [ +TAGS strlist,
    +PRBS strlist ].



;;; ===========================================================
;;; chart mapping rules
;;; ===========================================================

chart-mapping-rule := *top* &
  [ +CONTEXT *list*,
    +INPUT   *list*,
    +OUTPUT  *list*,
    +POSCONS string ].


;;; input mapping rules:

inplist := *list*.
inpcons := inplist & *cons* & [ FIRST +tok , REST inplist ].
inpnull := inplist & *null*.

inpmap-rule := chart-mapping-rule &
  [ +CONTEXT inplist,
    +INPUT   inplist,
    +OUTPUT  inplist ].

inpmap-x11-rule := inpmap-rule &
  [ +CONTEXT inplist,
    +INPUT   < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto , +TNT #tnt ] >,
    +OUTPUT  < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto , +TNT #tnt ] > ].

inpmap-x12-rule := inpmap-rule &
  [ +CONTEXT inplist,
    +INPUT   < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
    +OUTPUT  < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ],
               +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ] > ].

inpmap-x21-rule := inpmap-rule &
  [ +CONTEXT inplist,
    +INPUT   < +tok & [ +CFROM #cfrom ],
               +tok & [ +CTO   #cto   ] >,
    +OUTPUT  < +tok & [ +CFROM #cfrom, +CTO #cto ] > ].

inpmap-012-rule := inpmap-rule &
  [ +CONTEXT < >,
    +INPUT   < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ] > ,
    +OUTPUT  < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ],
               +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ] > ].

inpmap-101-rule := inpmap-rule &
  [ +CONTEXT < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto , +TNT #tnt ] >,
    +INPUT   < > ,
    +OUTPUT  < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto , +TNT #tnt ] > ].

inpmap-102-rule := inpmap-rule &
  [ +CONTEXT < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ] >,
    +INPUT   < > ,
    +OUTPUT  < +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ],
               +tok & [ +IDS #ids, +CFROM #cfrom, +CTO #cto ] > ].

;;; lexical mapping rules:

lexlist := *list*.
lexcons := lexlist & *cons* &
  [ FIRST lex-item ,
    REST  lexlist ].
lexnull := lexlist & *null*.

lexmap-rule := chart-mapping-rule &
  [ +CONTEXT lexlist,
    +INPUT   lexlist,
    +OUTPUT  lexlist ].

