:begin :type.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  Basic types
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

*sort* :< *top*.

atom :< *sort*.

*avm* :< *top*.

*list* :< *avm*.

*cons* := *list* &
  [ FIRST *top*,
    REST *top* ].

0-1-list :< *list*.

1-list := 0-1-list & *cons* &
  [ REST *null* ].

*null* :< 0-1-list.

1-plus-list := *cons* &
  [ REST *cons* ].

*diff-list* := *avm* &
[ LIST *list*,
  LAST *list* ].

symbol :< atom.

integer :< atom.

string := symbol.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

nonterminal := *top* & [ ARGS *list* ].
preterminal := *top* & [ STEM *list* ].

phrase := nonterminal.
front := nonterminal.

a-nonterminal := preterminal.
b-nonterminal := preterminal.

phrase_rule := phrase & [ ARGS < front, b-nonterminal > ].

front1_rule := front & [ ARGS < a-nonterminal > ].

front2_rule := front & [ ARGS < a-nonterminal, phrase >].

:end :type.

:begin :instance :status lex-entry.
a-lex := a-nonterminal & [ STEM "a" ].
b-lex := b-nonterminal & [ STEM "b" ].
:end :instance.

:begin :instance.
root := phrase.
:end :instance.
